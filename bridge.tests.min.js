'use strict';QUnit.module("Bridge Core");
QUnit.test("Directions",function(a){Bridge._checkDirection("n");Bridge._checkDirection("e");Bridge._checkDirection("s");Bridge._checkDirection("w");a.throws(function(){Bridge._checkDirection()},"No Direction specified should throw exception");a.throws(function(){Bridge._checkDirection(null)},"Null Direction specified should throw exception");a.throws(function(){Bridge._checkDirection(void 0)},"undefined Direction specified should throw exception");a.throws(function(){Bridge._checkDirection("a")},"Bad Direction specified should throw exception");
var b={n:"e",e:"s",s:"w",w:"n"},c;for(c in b)a.equal(Bridge.getLHO(c),b[c],b[c]+" is lho of "+c);var d={n:"w",e:"n",s:"e",w:"s"};for(c in d)a.equal(Bridge.getRHO(c),d[c],d[c]+" is rho of "+c);var e={n:"s",e:"w",s:"n",w:"e"};for(c in e)a.equal(Bridge.getPartner(c),e[c],e[c]+" is partner of "+c);for(c in b)a.ok(Bridge.areOpponents(c,b[c]),c+" and  "+b[c]+" are opponents");for(c in d)a.ok(Bridge.areOpponents(c,d[c]),c+" and  "+d[c]+" are opponents");for(c in e)a.ok(!Bridge.areOpponents(c,e[c]),e[c]+
" is not opponent of "+c);for(c in b)a.ok(!Bridge.arePartners(c,b[c]),c+" and  "+b[c]+" are not partners");for(c in d)a.ok(!Bridge.arePartners(c,d[c]),c+" and  "+d[c]+" are not partners");for(c in e)a.ok(Bridge.arePartners(c,e[c]),e[c]+" is partner of "+c)});
QUnit.test("Suits",function(a){Bridge._checkSuit("s");Bridge._checkSuit("h");Bridge._checkSuit("d");Bridge._checkSuit("c");a.throws(function(){Bridge._checkSuit()},"No suit specified should throw exception");a.throws(function(){Bridge._checkSuit(null)},"Null suit specified should throw exception");a.throws(function(){Bridge._checkSuit(void 0)},"undefined suit specified should throw exception");a.throws(function(){Bridge._checkSuit("n")},"Bad suit specified should throw exception")});
QUnit.test("Calls",function(a){Bridge._checkCall("n");Bridge._checkCall("s");Bridge._checkCall("h");Bridge._checkCall("d");Bridge._checkCall("c");Bridge._checkCall("p");Bridge._checkCall("x");Bridge._checkCall("r");a.throws(function(){Bridge._checkCall()},"No suit specified should throw exception");a.throws(function(){Bridge._checkCall(null)},"Null suit specified should throw exception");a.throws(function(){Bridge._checkCall(void 0)},"undefined suit specified should throw exception");a.throws(function(){Bridge._checkSuit("a")},
"Bad suit specified should throw exception");for(var b=["n","s","h","d","c"],c=0;c<b.length;++c)a.ok(Bridge.isStrain(b[c]),b[c]+" is a bid");b="p;x;r;a;; ".split(";");for(c=0;c<b.length;++c)a.ok(!Bridge.isStrain(b[c]),b[c]+" is not a bid")});
QUnit.test("Level",function(a){for(var b=1;7>=b;++b)Bridge._checkLevel(b),Bridge._checkLevel(""+b);a.throws(function(){Bridge._checkLevel()},"No Level specified should throw exception");a.throws(function(){Bridge._checkLevel(0)},"1 is minimum level");a.throws(function(){Bridge._checkLevel(8)},"7 is maximum level");a.throws(function(){Bridge._checkLevel("")},"has to be number");a.throws(function(){Bridge._checkLevel("s")},"has to be number")});
QUnit.test("Bids",function(a){for(var b=1;7>=b;++b)for(var c in Bridge.calls)Bridge.isStrain(c)?(Bridge._checkBid(b+c),a.throws(function(){Bridge._checkBid(c)},"Missing level")):(Bridge._checkBid(c),a.throws(function(){Bridge._checkBid(b+c)},"Level should not be specified"));a.throws(function(){Bridge._checkBid()},"Length has to be 1 or 2");a.throws(function(){Bridge._checkBid(null)},"Length has to be 1 or 2");a.throws(function(){Bridge._checkBid("")},"Length has to be 1 or 2");a.throws(function(){Bridge._checkBid("a")},
"Length has to be 1 or 2");a.throws(function(){Bridge._checkBid("1cd")},"Length has to be 1 or 2")});
QUnit.test("Ranks",function(a){Bridge._checkRank("a");Bridge._checkRank("k");Bridge._checkRank("q");Bridge._checkRank("j");Bridge._checkRank("t");Bridge._checkRank("9");Bridge._checkRank("8");Bridge._checkRank("7");Bridge._checkRank("6");Bridge._checkRank("5");Bridge._checkRank("4");Bridge._checkRank("3");Bridge._checkRank("2");a.throws(function(){Bridge._checkRank()},"No Rank specified should throw exception");a.throws(function(){Bridge._checkRank(null)},"Null Rank specified should throw exception");
a.throws(function(){Bridge._checkRank(void 0)},"undefined Rank specified should throw exception");a.throws(function(){Bridge._checkRank("n")},"Bad Rank specified should throw exception")});
QUnit.test("Vulnerabilities",function(a){Bridge._checkVulnerability("-");Bridge._checkVulnerability("n");Bridge._checkVulnerability("e");Bridge._checkVulnerability("b");a.throws(function(){Bridge._checkVulnerability()},"No Vulnerability specified should throw exception");a.throws(function(){Bridge._checkVulnerability(null)},"Null Vulnerability specified should throw exception");a.throws(function(){Bridge._checkVulnerability(void 0)},"undefined Vulnerability specified should throw exception");a.throws(function(){Bridge._checkVulnerability("a")},
"Bad Vulnerability specified should throw exception")});QUnit.test("MakeIdentifier",function(a){var b={"":""," ":"",abc:"abc"," abc   ":"abc","sriram narasimhan":"sriram_narasimhan","Bridge+Winners":"Bridge_Winners","Bridge Base Online":"Bridge_Base_Online",test_case:"test_case","a+b-c=d":"a_b_c_d","double  space":"double_space","a+=b-+*&^%c":"a_b_c"},c;for(c in b)a.equal(Bridge.makeIdentifier(c),b[c],c+" converted to identifier is "+b[c])});
QUnit.test("getHash",function(a){var b={"#":{},"#a":{a:!0},"#a=b":{a:"b"},"#a=1":{a:"1"},"#name=sriram":{name:"sriram"},"#name=sriram&advanced":{name:"sriram",advanced:!0},"#name=sriram&level=advanced":{name:"sriram",level:"advanced"},"name=sriram":{name:"sriram"}},c;for(c in b){location.hash=c;var d=Bridge.getHash(),e=b[c];a.deepEqual(d,e,JSON.stringify(d)+" should match "+JSON.stringify(e))}b={"#name=sriram?level=advanced":{name:"sriram"},"#name=sriram?advanced":{name:"sriram"},"#name=sriram&level=advanced?name=narasimhan":{name:"sriram",
level:"advanced"}};for(c in b)location.hash=c,d=Bridge.getHash("?"),e=b[c],a.deepEqual(d,e,JSON.stringify(d)+" should match "+JSON.stringify(e));location.hash=""});
QUnit.test("getQuery",function(a){var b={"?":{},"?a":{a:!0},"?a=b":{a:"b"},"?a=1":{a:"1"},"?name=sriram":{name:"sriram"},"?name=sriram&advanced":{name:"sriram",advanced:!0},"?name=sriram&level=advanced":{name:"sriram",level:"advanced"},"name=sriram":{}},c=document.URL,d;for(d in b){var e=c+d,e=Bridge._getQuery(e),f=b[d];a.deepEqual(e,f,JSON.stringify(e)+" should match "+JSON.stringify(f))}b={"?name=sriram#level=advanced":{name:"sriram"},"?name=sriram#advanced":{name:"sriram"},"?name=sriram&level=advanced#name=narasimhan":{name:"sriram",
level:"advanced"}};for(d in b)e=c+d,e=Bridge._getQuery(e,"#"),f=b[d],a.deepEqual(e,f,JSON.stringify(e)+" should match "+JSON.stringify(f))});
QUnit.test("_parseParameterValues",function(a){var b={"":{},a:{a:!0},"a=b":{a:"b"},"a=1":{a:"1"},"name=sriram":{name:"sriram"},"name=sriram&advanced":{name:"sriram",advanced:!0},"name=sriram&level=advanced":{name:"sriram",level:"advanced"}},c;for(c in b){var d=Bridge._parseParameterValues(c),e=b[c];a.deepEqual(d,e,JSON.stringify(d)+" should match "+JSON.stringify(e))}b={"name#sriram?level#advanced":{name:"sriram",level:"advanced"},"name#sriram?advanced":{name:"sriram",advanced:!0},"name#sriram?level#advanced?name#narasimhan":{name:"narasimhan",
level:"advanced"}};for(c in b)d=Bridge._parseParameterValues(c,"?","#"),e=b[c],a.deepEqual(d,e,JSON.stringify(d)+" should match "+JSON.stringify(e))});
QUnit.test("assignDefault",function(a){var b;b=Bridge.assignDefault(b);a.equal(typeof b,"undefined","Default value was undefined");a.ok(!b,"variable is undefined");for(var c=[1,!0,"test"],d=0;d<c.length;++d){b=void 0;var e=c[d];b=Bridge.assignDefault(b,e);a.strictEqual(b,e,"default is "+e)}for(d=0;d<c.length;++d)e=c[d],b=Bridge.assignDefault(b,e),a.strictEqual(b,"test","variable should be equal to test")});
QUnit.test("reportError",function(a){a.throws(function(){Bridge._reportError("Some Error")},function(a){return"Some Error"===a.message},"raised error instance satisfies the callback function");a.throws(function(){Bridge._reportError("Some Error","Test")},function(a){return"Some Error"===a.message},"raised error instance satisfies the callback function");Bridge.options.useContextInErrorMessage=!0;a.throws(function(){Bridge._reportError("Some Error","Test")},function(a){return"Test - Some Error"===
a.message},"raised error instance satisfies the callback function")});
QUnit.test("parseContainedText",function(a){var b={"{test}":{start:0,delimiter:"}",result:{position:5,text:"test"}},"sriram[narasim{han}]":{start:6,delimiter:"]",result:{position:19,text:"narasim{han}"}}},c;for(c in b){var d=b[c].result,e=Bridge._parseContainedText(c,b[c].start,b[c].delimiter);a.deepEqual(e,d,e+" should match "+d)}b={"{test":{start:0,delimiter:"}",result:{position:5,text:"test"}},"sriram[narasim{han}":{start:6,delimiter:"]",result:{position:19,text:"narasim{han}"}}};a.throws(function(){Bridge._parseContainedText(c,
b[c].start,b[c].delimiter)},"No closing delimiter")});QUnit.module("Bridge.Deal");
QUnit.test("Constructor",function(a){var b=new Bridge.Deal,c;for(c in Bridge.suits)for(var d in Bridge.ranks)a.deepEqual(b._cardAssignedTo[c][d],null,"None of the cards are assigned");a.deepEqual(b.board,1,"board is default");a.deepEqual(b.dealer,"n","dealer is default");a.deepEqual(b.vulnerability,"-","vulnerability is default");a.deepEqual(b.scoring,"KO","vulnerability is default");a.deepEqual(b.notes,"","notes is default");for(var e in Bridge.directions)a.ok(b.hands[e],"Hand objects should exist");
a.ok(b.auction,"Default Auction should exist")});
QUnit.test("Setters and Getters",function(a){var b=new Bridge.Deal;a.throws(function(){b.set()},"Bridge.Deal.set needs property argument");a.throws(function(){b.set("random_property")},"Bridge.Deal.set needs a value argument");a.throws(function(){b.set("random_property","value")},"Bridge.Deal.set needs a valid property");a.throws(function(){b.get()},"Bridge.Deal.get needs property argument");a.throws(function(){b.set("random_property")},"Bridge.Deal.get needs a valid property");for(var c in Bridge.directions)a.deepEqual(b.getHand(c),
b.hands[c],"get hand should match");b.set("board",1);a.equal(b.board,1,"board number is 1");a.equal(b.board,b.get("board"),"board number is 1");b.set("board","1");a.equal(b.board,1,"board number is 1");a.equal(b.board,b.get("board"),"board number is 1");a.throws(function(){b.set("board",0)},"Board Number cannot be less than 1");a.throws(function(){b.set("board","nan")},"Board Number has to be a number");a.throws(function(){b.set("board",2.5)},"Board Number has to be a integer");for(var d in Bridge.vulnerabilities)b.set("vulnerability",
d),a.deepEqual(b.vulnerability,d,"vulnerability as set"),a.deepEqual(b.vulnerability,b.get("vulnerability"),"vulnerability as set");b.set("vulnerability","0");a.deepEqual(b.vulnerability,"-","0 is treated as -");a.throws(function(){b.set("vulnerability","o")},"vulnerability has to be one of -,n,e,b");for(var e in Bridge.directions)b.set("dealer",e),a.deepEqual(b.dealer,e,"dealer as set"),a.deepEqual(b.dealer,b.get("dealer"),"dealer as set");a.throws(function(){b.set("dealer","o")},"dealer has to be one of n,e,s,w");
b.set("scoring","Anything Goes here");a.deepEqual(b.scoring,"Anything Goes here","scoring as set");a.deepEqual(b.scoring,b.get("scoring"),"scoring as set");b.set("notes","Anything Goes here");a.deepEqual(b.notes,"Anything Goes here","notes as set");a.deepEqual(b.notes,b.get("notes"),"notes as set");a.deepEqual(b.auction,b.get("auction"),"get works for auction")});QUnit.module("Bridge.Hand");
QUnit.test("Constructor",function(a){a.throws(function(){new Bridge.Hand},"Bridge.Hand constructor needs direction argument");a.throws(function(){new Bridge.Hand("a")},"Bridge.Hand constructor needs valid direction argument");for(var b in Bridge.directions){var c=new Bridge.Hand(b);a.deepEqual(c.direction,b,"Direction matches passed argument");a.deepEqual(c.name,Bridge.directions[b].name,"Name match name of passed direction");var d={},e;for(e in Bridge.suits){d[e]={};for(var f in Bridge.ranks)d[e][f]=!1}a.deepEqual(c.cards,
d,"Hand has suits but no cards in any suit initially");a.deepEqual(c.numCards,0,"No cards initially")}});
QUnit.test("Set and Get",function(a){a.throws(function(){c.set()},"Bridge.Hand.set needs property argument");a.throws(function(){c.set("name")},"Bridge.Hand.set needs a value argument");a.throws(function(){c.set("random_property","value")},"Bridge.Hand.set valid property");a.throws(function(){c.get()},"Bridge.Hand.get needs property argument");a.throws(function(){c.get("random_property")},"Bridge.Hand.get needs a known property argument");for(var b in Bridge.directions){var c=new Bridge.Hand(b);a.deepEqual(c.get("direction"),
b,"direction matches");a.deepEqual(c.get("name"),Bridge.directions[b].name,"Name matches passed name");a.deepEqual(c.get("count"),0,"Num cards is 0");a.deepEqual(c.get("hand"),"","hand is empty")}var d="Sriram";for(b in Bridge.directions)c=new Bridge.Hand(b),c.set("name",d),a.deepEqual(c.name,d,"Name match passed name"),a.deepEqual(c.get("name"),d,"Name matches passed name");d={sakqjhakq:{hand:"sakqjhakq",count:7,cards:"sa sk sq sj ha hk hq".split(" ")},hKqaskAjq:{hand:"sakqjhakq",count:7,cards:"sa sk sq sj ha hk hq".split(" ")},
cat9HKQ10sakq7d453:{hand:"sakq7hkqtd543cat9",count:13,cards:["ct","ht"]}};for(b in Bridge.directions)for(var e in d)c=new Bridge.Hand(b),c.set("hand",e),a.deepEqual(c.get("count"),d[e].count,"Number of cards matches"),_.each(d[e].cards,function(b){a.ok(c.hasCard(b[0],b[1]),"Hand should have "+b)},this),a.deepEqual(c.get("hand"),d[e].hand,"hand string should match");e=["a","saa","sahask","c1k","dt10"];for(b in Bridge.directions)_.each(e,function(c){a.throws(function(){(new Bridge.Hand(b)).set("hand",
c)},c+" is not a valid hand")});for(b in Bridge.directions){c=new Bridge.Hand(b);e="sakq7hkqtd543cat9";c.set("hand","cat9HKQ10sakq7d453");var d=c.get("name"),f=c.get("count");a.deepEqual(c.get("hand"),e,"hand string should match");var g=c.toJSON(),c=new Bridge.Hand(b);c.fromJSON(g);a.deepEqual(c.get("direction"),b,"direction should match");a.deepEqual(c.get("name"),d,"name should match");a.deepEqual(c.get("count"),f,"count should match");a.deepEqual(c.get("hand"),e,"hand string should match")}});
QUnit.test("Add and Remove Cards",function(a){for(var b in Bridge.directions){var c=new Bridge.Hand(b),d="s",e="a";a.ok(!c.hasCard(d,e),b+" hand should not have "+d+e);a.deepEqual(c.get("count"),0,b+" hand has 0 cards initially");a.throws(function(){c.addCard()},"Bridge.Hand.addCard needs suit");a.throws(function(){c.addCard(d)},"Bridge.Hand.addCard needs rank");a.throws(function(){c.removeCard()},"Bridge.Hand.removeCard needs suit");a.throws(function(){c.addCard(d)},"Bridge.Hand.removeCard needs rank");
c.addCard(d,e);a.ok(c.hasCard(d,e),b+" hand should have "+d+e);a.deepEqual(c.get("count"),1,b+" hand now has 1 card");a.deepEqual(c.get("hand"),"sa","handstring matches");a.throws(function(){c.addCard(d,e)},d+e+" already added to "+b);a.ok(c.hasCard(d,e),b+" hand should have "+d+e);a.deepEqual(c.get("count"),1,b+" hand now has 1 card");a.deepEqual(c.get("hand"),"sa","handstring matches");d="c";e="2";c.addCard(d,e);a.ok(c.hasCard(d,e),b+" hand should have "+d+e);a.deepEqual(c.get("count"),2,b+" hand now has 2 cards");
a.deepEqual(c.get("hand"),"sac2","handstring matches");c.removeCard(d,e);a.ok(!c.hasCard(d,e),b+" hand should not have "+d+e);a.deepEqual(c.get("count"),1,b+" hand now has 1 card");a.deepEqual(c.get("hand"),"sa","handstring matches");a.throws(function(){c.removeCard(d,e)},d+e+" does not belong to "+b);a.ok(!c.hasCard(d,e),b+" hand should not have "+d+e);a.deepEqual(c.get("count"),1,b+" hand now has 1 card");a.deepEqual(c.get("hand"),"sa","handstring matches");d="s";e="a";a.ok(c.hasCard(d,e),b+" hand should have "+
d+e);c.removeCard(d,e);a.ok(!c.hasCard(d,e),b+" hand should not have "+d+e);a.deepEqual(c.get("count"),0,b+" hand now has 0 cards");a.deepEqual(c.get("hand"),"","handstring matches");d="s";for(e in Bridge.ranks)c.addCard(d,e);a.deepEqual(c.get("count"),13,b+" hand now has 13 cards");a.deepEqual(c.get("hand"),"sakqjt98765432","handstring matches");d="c";e="2";a.throws(function(){c.addCard(d,e)},"Adding more than 13 cards");c.clearCards();a.deepEqual(c.get("count"),0,b+" hand now has 0 cards");a.deepEqual(c.get("hand"),
"","handstring matches");c.addCard(d,e);a.ok(c.hasCard(d,e),b+" hand should have "+d+e);a.deepEqual(c.get("count"),1,b+" hand now has 0 cards");a.deepEqual(c.get("hand"),"c2","handstring matches")}});QUnit.module("Bridge.Call");
QUnit.test("Constructor",function(a){a.throws(function(){new Bridge.Call},"Bridge.Hand constructor needs 2 arguments");a.throws(function(){new Bridge.Call("a")},"Bridge.Hand constructor needs valid call argument");a.throws(function(){new Bridge.Call("p")},"Bridge.Hand constructor needs second argument");for(var b in Bridge.directions){for(var c=1;7>=c;++c)for(var d in Bridge.calls)if(Bridge.isStrain(d)){var e=new Bridge.Call(c+d,b);a.equal(e.get("direction"),b,"Direction matches");a.equal(e.get("call"),
c+d,"Call matches");a.equal(e.get("annotation"),"","Annotation matches");a.equal(e.get("explanation"),"","Explanation matches")}else a.throws(function(){new Bridge.Call(c+d,b)},"Level not valid for non bid");for(d in Bridge.calls)Bridge.isStrain(d)?a.throws(function(){new Bridge.Call(d,b)},"Missing Level for bid"):(e=new Bridge.Call(d,b),a.equal(e.get("direction"),b,"Direction matches"),a.equal(e.get("call"),d,"Call matches"),a.equal(e.get("annotation"),"","Annotation matches"),a.equal(e.get("explanation"),
"","Explanation matches"))}});
QUnit.test("Getter and Setter",function(a){var b="p",c,b=new Bridge.Call(b,"n");a.throws(function(){b.set()},"Bridge.Hand.set needs property argument");a.throws(function(){b.set("name")},"Bridge.Hand.set needs a value argument");a.throws(function(){b.set("random_property","value")},"Bridge.Hand.set valid property");a.throws(function(){b.get()},"Bridge.Hand.get needs property argument");a.throws(function(){b.get("random_property")},"Bridge.Hand.get needs a known property argument");b.set("annotation",
"some_annotation");a.equal(b.get("annotation"),"some_annotation","Annotation matches");b.set("explanation","some_explanation");a.equal(b.get("explanation"),"some_explanation","Explanation matches");a.equal(b.toString(),"p{some_explanation}(some_annotation)","toString matches");for(c in Bridge.directions)b.set("direction",c),a.equal(b.get("direction"),c,"Direction matches")});QUnit.module("Bridge.Auction");QUnit.test("Constructor",function(a){var b=new Bridge.Auction;a.equal(b.dealer,"n","Default dealer");a.equal(b.vulnerability,"-","Default vul");a.equal(b.nextToCall,"n","Default nextToCall");a.equal(b.calls.length,0,"no calls");a.deepEqual(b.contracts.length,0,"no contracts")});
QUnit.test("Getter and Setter",function(a){var b=new Bridge.Auction;a.equal(b.get("dealer"),"n","Default dealer");for(var c in Bridge.directions)b.set("dealer",c),a.equal(b.get("dealer"),c,"dealer matches"),a.equal(b.nextToCall,c,"nextocall matches");a.equal(b.get("vulnerability"),"-","Default vul");for(var d in Bridge.vulnerabilities)b.set("vulnerability",d),a.equal(b.get("vulnerability"),d,"vul matches");a.equal(b.get("auction"),"","auction is empty");a.equal(b.get("contract").toString(),"","contract is empty");
c={"":{dealer:"n",auction:"",contract:""},ppp:{dealer:"n",auction:"ppp",contract:""},pppp:{dealer:"n",auction:"pppp",contract:""},"1c":{dealer:"n",auction:"1c",contract:"1cn"},"1d":{dealer:"e",auction:"1d",contract:"1de"},"1h":{dealer:"s",auction:"1h",contract:"1hs"},"1s":{dealer:"w",auction:"1s",contract:"1sw"},p1c:{dealer:"n",auction:"p1c",contract:"1ce"},pp1c:{dealer:"n",auction:"pp1c",contract:"1cs"},ppp1c:{dealer:"n",auction:"ppp1c",contract:"1cw"},"1c{precision}x":{dealer:"n",auction:"1c{precision}x",
contract:"1cxn"},"1cx(!)r":{dealer:"n",auction:"1cx(!)r",contract:"1cxxn"},p1cppx:{dealer:"n",auction:"p1cppx",contract:"1cxe"},p1cppxrp2hp2sp3nppp:{dealer:"n",auction:"p1cppxrp2hp2sp3nppp",contract:"3nw"}};for(var e in c)b=new Bridge.Auction,b.setDealer(c[e].dealer),b.set("auction",e),a.equal(b.get("auction"),c[e].auction,"auction matches"),a.equal(b.get("contract").toString(),c[e].contract,"contract matches");e={"1cn":{dealer:"s",auction:"pp1cppp",contract:"1cn"},"1dn":{dealer:"n",auction:"1dppp",
contract:"1dn"},"6sxe":{dealer:"n",auction:"p6sxppp",contract:"6sxe"},"4dxxs":{dealer:"w",auction:"ppp4dxrppp",contract:"4dxxs"}};for(var f in e)b=new Bridge.Auction,b.setDealer(e[f].dealer),b.set("contract",f),a.equal(b.get("auction"),e[f].auction,"auction matches"),a.equal(b.get("contract").toString(),e[f].contract,"contract matches");_.each("a x r 1cpppx 1cr 1cpx 1cxpr 1c[test] 1c{test 8c".split(" "),function(c){b=new Bridge.Auction;a.throws(function(){b.set("auction",c)},"bad auction")},this);
_.each("a 4h 1cx 2sxx 1cxr 7nr cxe 1sx 5dxx".split(" "),function(c){b=new Bridge.Auction;a.throws(function(){b.set("contract",c)},"bad contract")},this)});
QUnit.test("add remove calls",function(a){var b=new Bridge.Auction;a.throws(function(){b.addCall("x")},"double not allowed");b.addCall("p");b.addCall("1c");a.equal(b.get("auction"),"p1c","auction matches");a.equal(b.get("contract").toString(),"1ce","contract matches");b.removeCall();a.equal(b.get("auction"),"p","auction matches");a.equal(b.get("contract").toString(),"","contract matches");b.addCall("1c");a.equal(b.get("auction"),"p1c","auction matches");a.equal(b.get("contract").toString(),"1ce",
"contract matches");b.addCall("x");a.equal(b.get("auction"),"p1cx","auction matches");a.equal(b.get("contract").toString(),"1cxe","contract matches");b.addCall("r");a.equal(b.get("auction"),"p1cxr","auction matches");a.equal(b.get("contract").toString(),"1cxxe","contract matches");b.removeCall();a.equal(b.get("auction"),"p1cx","auction matches");a.equal(b.get("contract").toString(),"1cxe","contract matches");b.addCall("3n");a.equal(b.get("auction"),"p1cx3n","auction matches");a.equal(b.get("contract").toString(),
"3nw","contract matches");b.addCall("p");a.equal(b.get("auction"),"p1cx3np","auction matches");a.equal(b.get("contract").toString(),"3nw","contract matches");b.addCall("p");a.equal(b.get("auction"),"p1cx3npp","auction matches");a.equal(b.get("contract").toString(),"3nw","contract matches");b.addCall("p");a.equal(b.get("auction"),"p1cx3nppp","auction matches");a.equal(b.get("contract").toString(),"3nw","contract matches");a.throws(function(){b.addCall("4n")},"auction complete");b.removeCall();b.addAllPass();
a.equal(b.get("auction"),"p1cx3nppp","auction matches");a.equal(b.get("contract").toString(),"3nw","contract matches");b.removeCall();b.removeCall();b.addAllPass();a.equal(b.get("auction"),"p1cx3nppp","auction matches");a.equal(b.get("contract").toString(),"3nw","contract matches");b.removeCall();b.removeCall();b.removeCall();b.addAllPass();a.equal(b.get("auction"),"p1cx3nppp","auction matches");a.equal(b.get("contract").toString(),"3nw","contract matches")});QUnit.module("Bridge.Contract");QUnit.test("Constructor",function(a){var b=new Bridge.Contract;a.equal(b.level,null,"level is null");a.equal(b.suit,null,"suit is null");a.ok(!b.doubled,"not doubled");a.ok(!b.redoubled,"not redoubled");a.equal(b.declarer,null,"declarer is null");for(var c in Bridge.calls)for(var d in Bridge.directions)Bridge.isStrain(c)&&a.equal(b.firstToBid[c][d],null,"First bid for "+c+d+" is null");a.equal(b.numPasses,0,"0 passes");a.ok(!b.isComplete,"auction not complete")});
QUnit.test("Other methods",function(a){var b=new Bridge.Contract,c=b.clone();a.deepEqual(b,c,"clone should be same");var c=["p","p","p"],b=new Bridge.Contract,d="n";_.each(c,function(a){a=new Bridge.Call(a,d);d=Bridge.getLHO(d);b.update(a)},this);a.equal(b.level,null,"level matches");a.equal(b.suit,null,"suit matches");a.ok(!b.doubled,"not doubled");a.ok(!b.redoubled,"not redoubled");a.equal(b.declarer,null,"declarer matches");a.equal(b.numPasses,3,"3 passes");a.ok(!b.isComplete,"auction not complete");
c=b.allowedCalls(d);a.ok(c.p);a.ok(!c.x);a.ok(!c.r);a.ok(c.u);a.ok(c["1c"]);a.ok(c["7n"]);a.equal(c.minimum_level,1);c=["p","p","p","p"];b=new Bridge.Contract;d="n";_.each(c,function(a){a=new Bridge.Call(a,d);d=Bridge.getLHO(d);b.update(a)},this);a.equal(b.level,null,"level matches");a.equal(b.suit,null,"suit matches");a.ok(!b.doubled,"not doubled");a.ok(!b.redoubled,"not redoubled");a.equal(b.declarer,null,"declarer matches");a.equal(b.numPasses,4,"4 passes");a.ok(b.isComplete,"auction iscomplete");
c=b.allowedCalls(d);a.ok(!c.p);a.ok(!c.x);a.ok(!c.r);a.ok(c.u);a.ok(!c["1c"]);a.ok(!c["7n"]);a.equal(c.minimum_level,8);c=["1c","p","p","1h","p"];b=new Bridge.Contract;d="n";_.each(c,function(a){a=new Bridge.Call(a,d);d=Bridge.getLHO(d);b.update(a)},this);a.equal(b.level,1,"level matches");a.equal(b.suit,"h","suit matches");a.ok(!b.doubled,"not doubled");a.ok(!b.redoubled,"not redoubled");a.equal(b.declarer,"w","declarer matches");a.equal(b.firstToBid.c.n,"n","First bid for c is n");a.equal(b.firstToBid.c.s,
"n","First bid for c is n");a.equal(b.firstToBid.h.e,"w","First bid for c is n");a.equal(b.firstToBid.h.w,"w","First bid for c is n");a.equal(b.numPasses,1,"1 passes");a.ok(!b.isComplete,"auction not complete");c=b.allowedCalls(d);a.ok(c.p);a.ok(!c.x);a.ok(!c.r);a.ok(c.u);a.ok(!c["1h"]);a.ok(c["1s"]);a.equal(c.minimum_level,1);c="1c p p 1h p 2h".split(" ");b=new Bridge.Contract;d="n";_.each(c,function(a){a=new Bridge.Call(a,d);d=Bridge.getLHO(d);b.update(a)},this);a.equal(b.level,2,"level matches");
a.equal(b.suit,"h","suit matches");a.ok(!b.doubled,"not doubled");a.ok(!b.redoubled,"not redoubled");a.equal(b.declarer,"w","declarer matches");a.equal(b.firstToBid.c.n,"n","First bid for c is n");a.equal(b.firstToBid.c.s,"n","First bid for c is n");a.equal(b.firstToBid.h.e,"w","First bid for c is n");a.equal(b.firstToBid.h.w,"w","First bid for c is n");a.equal(b.numPasses,0,"0 passes");a.ok(!b.isComplete,"auction not complete");c=b.allowedCalls(d);a.ok(c.p);a.ok(c.x);a.ok(!c.r);a.ok(c.u);a.ok(!c["2h"]);
a.ok(c["2s"]);a.equal(c.minimum_level,2);c="1h p p 2h p 3h x p p".split(" ");b=new Bridge.Contract;d="n";_.each(c,function(a){a=new Bridge.Call(a,d);d=Bridge.getLHO(d);b.update(a)},this);a.equal(b.level,3,"level matches");a.equal(b.suit,"h","suit matches");a.ok(b.doubled,"doubled");a.ok(!b.redoubled,"not redoubled");a.equal(b.declarer,"w","declarer matches");a.equal(b.firstToBid.h.n,"n","First bid for c is n");a.equal(b.firstToBid.h.s,"n","First bid for c is n");a.equal(b.firstToBid.h.e,"w","First bid for c is n");
a.equal(b.firstToBid.h.w,"w","First bid for c is n");a.equal(b.numPasses,2,"2 passes");a.ok(!b.isComplete,"auction not complete");c=b.allowedCalls(d);a.ok(c.p);a.ok(!c.x);a.ok(c.r);a.ok(c.u);a.ok(!c["2h"]);a.ok(c["3s"]);a.equal(c.minimum_level,3);c="1c p p 1h p 2h x r p p p".split(" ");b=new Bridge.Contract;d="n";_.each(c,function(a){a=new Bridge.Call(a,d);d=Bridge.getLHO(d);b.update(a)},this);a.equal(b.level,2,"level matches");a.equal(b.suit,"h","suit matches");a.ok(b.doubled,"doubled");a.ok(b.redoubled,
"redoubled");a.equal(b.declarer,"w","declarer matches");a.equal(b.firstToBid.c.n,"n","First bid for c is n");a.equal(b.firstToBid.c.s,"n","First bid for c is n");a.equal(b.firstToBid.h.e,"w","First bid for c is n");a.equal(b.firstToBid.h.w,"w","First bid for c is n");a.equal(b.numPasses,3,"1 passes");a.ok(b.isComplete,"auction is complete");c=b.allowedCalls(d);a.ok(!c.p);a.ok(!c.x);a.ok(!c.r);a.ok(c.u);a.ok(!c["1c"]);a.ok(!c["7n"]);a.equal(c.minimum_level,8)});
